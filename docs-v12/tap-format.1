<!doctype html>
<title>
  
    Test Anything Protocol | Node Tap
  
</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
html {
  display: block;
  font-family: sans-serif;
  padding: 0 1em;
  margin: 0 auto;
  border-top: 10px solid #f7df1e;
  line-height:1.5;
  color:#333;
  position:relative;
}

html::before {
  width:100%;
  display:block;
  position:fixed;
  top:0;
  left:0;
  height:10px;
  background:#f7df1e;
  content: " ";
}

body {
  padding:0;
  margin: 0;
}

a:hover, a:active, a:focus {
  color: red;
}

code, pre, kbd {
  font-size: 100%;
  font-family: Triplicate T4, Fira Mono OT, Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
}

section.side {
  display: block;
  padding:0;
  min-height:100px;
  margin: 0;
  width:100%;
}

.side h2, .side p {
  margin-top: 0;
}

section.side li {
  display: inline;
}

section.side ul {
  display: block;
  overflow:auto;
}

section.side li ul {
  display: inline;
}

.side ul {
  padding:0;
  margin:0 ;
}

.side img {
  display: block;
  margin-right: 1em;
  margin-top: 1em;
}

section.main {
  display: block;
  padding-top:20px;
}

@media only screen and (min-width: 240px) {
  .side img {
    float:left;
    margin: 0 1em 0 0;
  }
}

@media only screen and (min-width: 800px) {
  html {
    width:600px;
    padding:0 0 0 200px;
  }
  section.side {
    width: 200px;
    position: fixed;
    margin: 0 0 0 -200px;
  }
  .side img {
    display: block;
    float:none;
  }

  section.side ul {
    overflow: none;
    display: block;
  }

  section.side li {
    display: block;
  }

  section.side a {
    display: block;
  }

  section.side li ul {
    margin: 0;
    display: block;
  }

  section.side li li {
    margin-left: 1em;
  }

  .side h2, .side p {
    margin-top: 1em;
  }

  section.main {
    float: right;
    width: 600px;
    padding-bottom: 100px;
  }
}
</style>
<link href="static/prism.css" rel="stylesheet">

<body>

<section class='side'>
  <h2><a href="index.html"><img src='static/tapjs.png' width=100 height=100 alt='Test Anything JS'></a></h2>
  <p>A Test-Anything-Protocol library for Node.js</p>
  <ul>
  
    <li>
      <a href="index.html">Index</a>
      
    </li>
  
    <li>
      <a href="basics/index.html">Getting Started</a>
      
    </li>
  
    <li>
      <a href="api/index.html">API</a>
      
      <ul>
        
        <li><a href="asserts/index.html">Asserts</a></li>
        
        <li><a href="promises/index.html">Promises</a></li>
        
        <li><a href="subtests/index.html">Subtests</a></li>
        
        <li><a href="parallel/index.html">Parallel Tests</a></li>
        
        <li><a href="snapshots/index.html">Snapshot Testing</a></li>
        
        <li><a href="grep/index.html">Filtering Tests: grep</a></li>
        
        <li><a href="only/index.html">Filtering Tests: only</a></li>
        
        <li><a href="mochalike/index.html">Mocha-like DSL</a></li>
        
        <li><a href="advanced/index.html">Advanced</a></li>
        
      </ul>
      
    </li>
  
    <li>
      <a href="cli/index.html">CLI</a>
      
    </li>
  
    <li>
      <a href="tap-format.1">The Protocol</a>
      
    </li>
  
    <li>
      <a href="reporting/index.html">Reporting</a>
      
    </li>
  
    <li>
      <a href="coverage/index.html">Coverage</a>
      
    </li>
  
    <li>
      <a href="changelog/index.html">Change Log</a>
      
    </li>
  
    <li>
      <a href="https://github.com/tapjs/node-tap">GitHub Repo</a>
      
    </li>
  
  </ul>
  <pre><a href="http://npm.im/tap">npm install tap</a>
<a href="cli/index.html">tap test/*.js</a></pre>
</section>
<section class='main'>
<h1 id="test-anything-protocol">Test Anything Protocol</h1>

<p><code class="highlighter-rouge">tap</code> is a JavaScript implementation of the <a href="http://testanything.org/">Test Anything
Protocol</a>.  TAP is a highly parseable,
human-readable, loosely-specified format for reporting test results.
It rose to popularity in the Perl community, with CPAN’s
<a href="http://search.cpan.org/~exodist/Test-Simple-1.302075/">Test</a> family.</p>

<p>This protocol is how child test processes communicate their success or
failure with their parent process.</p>

<p>Most of the time, you’ll view <code class="highlighter-rouge">tap</code>’s output using one of the
<a href="reporting/index.html">reporting options</a>.  However, occasionally it’s useful
to view the raw output for a variety of reasons.  For example, you may
wish to run a test file directly, or store TAP output for later
analysis.</p>

<p>Most of the time, you’ll generate TAP by using the functions in
<code class="highlighter-rouge">tap</code>’s <a href="api/index.html">API</a>.  But if you have a different kind of program
that you would like to consume with <code class="highlighter-rouge">tap</code>’s test runner, you can just
print TAP to standard output in any way you please.</p>

<p>This page describes the TAP format that <code class="highlighter-rouge">tap</code> supports.</p>

<h2 id="version">Version</h2>

<p>TAP streams generally start with <code class="highlighter-rouge">TAP version 13</code>.  This isn’t
strictly required by <code class="highlighter-rouge">tap</code>, but since some other TAP implementations
<em>do</em> require it, <code class="highlighter-rouge">tap</code> always outputs <code class="highlighter-rouge">TAP version 13</code> as the line.</p>

<p>There’s no way to set the version in <code class="highlighter-rouge">tap</code>.</p>

<p>Since some TAP consumers get upset about an indented version
declaration, the version in Subtest streams is always stripped out.</p>

<h2 id="plan">Plan</h2>

<p>Every TAP stream must contain a “plan” either at the beginning or the
end of the set of test points.  The plan lists the range of test point
IDs that are expected in the TAP stream.  It can also optionally
contain a comment prefixed by a <code class="highlighter-rouge">#</code>.</p>

<p>A plan of <code class="highlighter-rouge">1..0</code> indicates that the test file is completely skipped,
and no tests are expected.</p>

<p>Examples:</p>

<div class="language-tap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">1..9</span><span class="c">
</span><span class="kd">1..0</span> <span class="c"># </span><span class="cp">skip</span><span class="c"> this test file, no tests here
</span>5..8 # only run tests 5 through 8
</code></pre></div></div>

<p>When consuming a plan, <code class="highlighter-rouge">tap</code> will accept any of these.  However, when
generating test output with <code class="highlighter-rouge">tap</code>, you may only set the <em>end</em> of the
plan to indicate the number of tests you expect to run (or expect to
have run).</p>

<p>Plans cannot be set in the middle of a test set.  That is, they have
to come before all the test points, or after all of them.</p>

<p>To set a plan in <code class="highlighter-rouge">tap</code> explicitly, use the <code class="highlighter-rouge">t.plan(n, [comment])</code>
function.  If you end a test by returning a <a href="promises/index.html">promise</a> or
calling <code class="highlighter-rouge">t.end()</code>, then a plan will be automatically generated at the
end of the stream.</p>

<h2 id="test-point">Test Point</h2>

<p>Sometimes called an “assert” or “test line”, this is the core of the
TAP format.  A test point consists of 4 things:</p>

<ol>
  <li>Either <code class="highlighter-rouge">ok</code> or <code class="highlighter-rouge">not ok</code>.  This is required.  It specifies whether
the test point is a pass or a fail.</li>
  <li>A optional numeric identifier.  This is a check to ensure that test
points are correctly ordered, and that the output is reasonable.
<code class="highlighter-rouge">tap</code> does not let you set this number explicitly.  It assigns test
point IDs based on its own internal counter.</li>
  <li>An optional message, which may be prefixed by a <code class="highlighter-rouge">-</code> character.</li>
  <li>A directive, prefixed with a <code class="highlighter-rouge">#</code> character.  (See below)</li>
</ol>

<p>After a test point, there can be some YAML diagnostics, and
potentially also a buffered subtest.</p>

<div class="language-tap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">1..2</span><span class="c">
</span><span class="kr">ok</span>
<span class="gr">not ok</span> <span class="mi">2</span> - that last test point was pretty bare
  ---
  but: this one
  has:
    - lots
    - of
    - stuff
  ...
</code></pre></div></div>

<p>The most common way to generate a test point in <code class="highlighter-rouge">tap</code> is to use one of
the <a href="asserts/index.html">assertion methods</a>.  Test points are also generated
for <a href="subtests/index.html">subtests</a>, and to communicate failures for unfinished
tests, exceeding a plan count, and anything else that might go wrong.</p>

<h2 id="directives">Directives</h2>

<p>A directive is similar to a comment, but communicates some information
about a test point.</p>

<p>A test point can be marked as <code class="highlighter-rouge">todo</code> to indicate that it is going to
be implemented later, or <code class="highlighter-rouge">skip</code> to indicate that the test should not
be performed in the given context.  <code class="highlighter-rouge">todo</code> and <code class="highlighter-rouge">skip</code> are</p>

<p>A test point associated with a
Subtest can also have a <code class="highlighter-rouge"># time=...</code> directive indicating how long the
subtest took to run.</p>

<p>Example:</p>

<div class="language-tap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gr">not ok</span> <span class="mi">1</span> - this will pass some day <span class="c"># </span><span class="cp">todo</span><span class="c">
</span><span class="kr">ok</span> <span class="mi">2</span> - unix stuff <span class="c"># </span><span class="cp">SKIP</span><span class="c"> do not run on Windows
# Subtest: child test
</span>    1..1
    ok
<span class="kr">ok</span> <span class="mi">3</span> - child test <span class="c"># time=12ms
</span><span class="kd">1..3</span><span class="c">
</span></code></pre></div></div>

<p>In this case, we see a test that failed, but that’s expected, because
it hasn’t been implemented yet.  Then, test point #2, we’re skipping
because we’re on Windows.  Lastly, there’s a child test stream that
took 12ms to complete.</p>

<p>Overall, a passing test stream :)</p>

<p>To set a <code class="highlighter-rouge">todo</code> or <code class="highlighter-rouge">skip</code> directive, pass <code class="highlighter-rouge">{ todo: reason }</code> or
<code class="highlighter-rouge">{skip: reason}</code> in either an assert or subtest method.  If you don’t
wish to provide a reason, you can pass <code class="highlighter-rouge">{todo: true}</code> or <code class="highlighter-rouge">{skip:
true}</code>.  You can also mark subtests as <code class="highlighter-rouge">todo</code> by omitting the callback
function.</p>

<h2 id="yaml-diagnostics">YAML Diagnostics</h2>

<p>Diagnostics can be used to provide additional details about a test
point.  They are a YAML object indented by 2 spaces, starting with
<code class="highlighter-rouge">---</code> and ending with <code class="highlighter-rouge">...</code>.  YAML diagnostics are associated with the
preceeding test point.</p>

<div class="language-tap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">TAP version 13
</span>
<span class="kr">ok</span> <span class="mi">1</span> - everything is ok, just very communicative
  ---
  yaml: is
  so: true
  to:
    - every
    - vector
  ...

<span class="gr">not ok</span> <span class="mi">2</span> - failing, gonna tell you why
  ---
  at:
    file: foo.js
    line: 13
    column: 4
  message: This is not ok
  thrown: true
  ...

<span class="kd">1..2</span><span class="c">
</span></code></pre></div></div>

<p>In <code class="highlighter-rouge">tap</code>, diagnostics are printed by default with failing tests, but
not with passing tests.  You can change this default by setting
<code class="highlighter-rouge">TAP_DIAG=0</code> in the environment to make it not print diagnostics with
failing tests or by setting <code class="highlighter-rouge">TAP_DIAG=1</code> to make it print diagnostics
with passing tests by default.  Setting <code class="highlighter-rouge">{ diagnostic: true }</code> in a
test point options object will always print diagnostics.  Setting <code class="highlighter-rouge">{
diagnostic: false }</code> will always omit diagnostics.</p>

<h2 id="subtests">Subtests</h2>

<p>A <a href="subtests/index.html">subtest</a> is an indented TAP stream that is a child of
the current set of tests.  It can be used to group test points
together, consume the output of a TAP-producing child process, or run
tests asynchronously.</p>

<p>“Unbuffered” subtests start with a <code class="highlighter-rouge"># Subtest: &lt;name&gt;</code> comment,
followed by the child TAP stream indented by 4 spaces, and finished
with a test point that indicates the passing status of the stream as a
whole.</p>

<p>“Buffered” subtest start with a test point indicating the status of
the group, and the indented child stream is wrapped in <code class="highlighter-rouge">{}</code> braces.
It’s called “buffered” because the entire child stream has to be
parsed before the summary test point can be generated.</p>

<p>The summary test point ensures that TAP consumers that ignore indented
lines will at least report on the passing status based on the summary.</p>

<div class="language-tap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">1..2</span><span class="c">
# Subtest: not buffered
</span>    ok 1 - each line just printed as it comes
    ok 2 - no time to wait!
    1..2
<span class="kr">ok</span> <span class="mi">1</span> - not buffered

<span class="kr">ok</span> <span class="mi">2</span> - buffered {
    1..3
    ok 1 - this test is buffered
    ok 2 - so all the test points had to be parsed
    ok 3 - before success could be reported
}
</code></pre></div></div>

<p>Directives on buffered subtests can go either before or after the <code class="highlighter-rouge">{</code>
character.  When a buffered subtest has diagnostics, the <code class="highlighter-rouge">{</code> goes on
the line by itself after the yaml block.</p>

<div class="language-tap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">1..2</span><span class="c">
</span><span class="kr">ok</span> <span class="mi">1</span> - usually would not even run this <span class="c"># </span><span class="cp">TODO</span><span class="c"> {
</span>    ok 1 - but here we are anyway
    ok 2 - todo'ing away
    1..2
}
<span class="kr">ok</span> <span class="mi">2</span> - a very diagnostic subtest <span class="c"># time=33ms
</span>  ---
  this: is fine
  i: am ok with the way things are proceeding
  ...
{
    1..1
    ok 1 - whatever
}
</code></pre></div></div>

<p>The most common way to run subtests is via <code class="highlighter-rouge">t.test(...)</code>.  See
<a href="subtests/index.html">Subtests</a> for more info.</p>

<h2 id="pragma">Pragma</h2>

<p>Pragmas are a way to set arbitrary switches on the parser.</p>

<p>The only switch that is treated specially is <code class="highlighter-rouge">strict</code>.  When in strict
mode, any non-TAP data is treated as an error.</p>

<div class="language-tap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">TAP version 13
</span>pragma +strict
<span class="kr">ok</span> <span class="mi">1</span> - this is very strict
so this line here is an error
<span class="gr">not ok</span> <span class="mi">2</span> - that line failed
pragma -strict
but this line here is fine
<span class="kr">ok</span> <span class="mi">3</span> - because garbage data is allowed in non-strict mode
<span class="kd">1..3</span><span class="c">
</span></code></pre></div></div>

<p>Set pragms in <code class="highlighter-rouge">tap</code> by doing <code class="highlighter-rouge">t.pragma({ keys: values, ... })</code>.
The object can contain any number of keys, but only <code class="highlighter-rouge">strict</code> has any
meaning to <code class="highlighter-rouge">tap</code> itself.</p>

<h2 id="bail-out">Bail out!</h2>

<p>Sometimes a set of tests hits a state where there’s no point
continuing.  Or, perhaps you just wish to stop on the first failure to
work on errors one at a time with a faster turnover.</p>

<p>In this case, TAP allows a “bail out”.  A bail out is much more
extreme than a test point failure.  It means that everything should
come to a halt, all the way up to the highest level test harness.
Nothing should come after a bailout.  Any plan is dropped, test points
ignored, and so on.</p>

<div class="language-tap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">TAP version 13
</span><span class="c"># Subtest: child
</span>    # Subtest: grandchild
        1..2999
        ok 1 - here we go
        Bail out! Nope.
<span class="gr">Bail out! Nope.
</span></code></pre></div></div>

<p>Bail outs in buffered tests should still print the closing <code class="highlighter-rouge">}</code> braces,
but no other output.</p>

<div class="language-tap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">TAP version 13
</span><span class="gr">not ok</span> <span class="mi">1</span> - child {
    not ok 2 - grandchild {
        1..2999
        ok 1 - here we go
        Bail out! Nope.
    }
}
<span class="gr">Bail out! Nope.
</span></code></pre></div></div>

<p>You can generate a bailout explicitly by doing <code class="highlighter-rouge">t.bailout(reason)</code>.
You can also have <code class="highlighter-rouge">tap</code> bail out on any test failure by setting
<code class="highlighter-rouge">TAP_BAIL=1</code> in the environment, or by setting <code class="highlighter-rouge">{ bail: true }</code> in a
child test options, or by running with the <code class="highlighter-rouge">tap</code> <a href="cli/index.html">command-line
interface</a> and passing the <code class="highlighter-rouge">--bail</code> flag.</p>

<h2 id="comments-and-other-stuff">Comments and Other Stuff</h2>

<p>Anything that starts with a <code class="highlighter-rouge">#</code> and is not a directive or subtest
prefix is treated as a comment, and ignored.</p>

<p>Anything that isn’t parseable as one of the above types of lines is
considered “extra” non-TAP data.  In strict mode, extra output is an
error.  In non-strict mode, it’s ignored.</p>

<p>The <code class="highlighter-rouge">tap</code> runner ignores comments unless <code class="highlighter-rouge">--comments</code> is provided, in
which case it is printed to stderr.  Non-TAP data is passed through
the reporting engine and printed to the top-level process standard
output.  This means that <code class="highlighter-rouge">console.log('foo')</code> will make its way to the
top level, instead of being swallowed by a reporter.</p>

<p>You can generate comments by doing <code class="highlighter-rouge">t.comment('foo')</code>.  This function
takes any arguments that can be passed to <code class="highlighter-rouge">console.log()</code>.  For
example, <code class="highlighter-rouge">t.comment('number %d and\nobj =', 1, { foo: 'bar' })</code> would
output:</p>

<div class="language-tap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># number 1 and
# obj = { foo: 'bar' }
</span></code></pre></div></div>

</section>
<script src="static/prism.js"></script>
</body>
